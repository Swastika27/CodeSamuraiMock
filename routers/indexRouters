const express = require('express');
const Book = require('../models/book.js');
const app = require('../app.js');


const router = express.Router({mergeParams : true});

const userRouter=require('./userAction.js');
const stationRouter = require('./stationAction.js');
const trainRouter = require('./trainAction.js');

router.use('/users',userRouter);
router.use('/stations', stationRouter);
router.use('/trains', trainRouter);

// router.post('/', async(req, res) => {
//     // add books
//     const book = new Book(req.body);

//     const id = req.body.id;

//     book.save()
//         .then((result) => {
//             res.status(201).json(req.body);
//         })
//         .catch((err) => {
//             console.log(err);
//         })
//     // failure response not needed
// })

// router.put('/:id', async (req, res) => {
//     const id = req.params.id;

//     try {
//         // Check if the provided id is a valid number
//         if (isNaN(id)) {
//             return res.status(400).json({ error: 'Invalid ID format' });
//         }

//         // Find the book by id and update its details
//         const updatedBook = await Book.findOneAndUpdate({ id: Number(id) }, req.body, { new: true });

//         // If the book is found and updated successfully
//         if (updatedBook) {
//             res.status(200).json(updatedBook);
//         } else {
//             // If the requested book does not exist
//             res.status(404).json({ error: 'Book not found' });
//         }
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ error: 'Internal Server Error' });
//     }
// });
// router.get('/:id', async(req, res) => {
//     // fetch book by id
//     // request will not have any body

//     const id = req.params.id;

//     try {
//         // Check if the provided id is a valid number
//         if (isNaN(id)) {
//             return res.status(400).json({ error: 'Invalid ID format' });
//         }

//         // Find the book by id and update its details
//         const foundbook = await Book.findOne({id : Number(id)});

//         console.log(foundbook.length);
//         // If the book is found and updated successfully
//         if (foundbook) {
//             res.status(200).json(foundbook);
//         } else {
//             // If the requested book does not exist
//             res.status(500).json({ message: `book with id: ${id} was not found` });
//         }
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ message: `book with id: ${id} was not found` });
//     }
// })




// router.get('/:id?', async (req, res) => {
//     const bookId = req.params.id;

//     try {
//         // If bookId is provided, find the book by ID
//         if (bookId) {
//             const book = await Book.findOne({id:bookId});

//             // If the book is found, respond with a 200 status code and the book object
//             if (book) {
//                 return res.status(200).json(book);
//             } else {
//                 // If the book is not found, respond with a 404 status code and an error message
//                 return res.status(404).json({ error: 'Book not found' });
//             }
//         }

//         // If no bookId is provided, fetch all books
//         const allBooks = await Book.find();

//         // Respond with a 200 status code and an array of all books
//         res.status(200).json(allBooks);
//     } catch (error) {
//         console.error(error);
//         // If there's an error, respond with a 500 status code and an error message
//         res.status(500).json({ error: 'Internal Server Error' });
//     }
// });


  module.exports = router;